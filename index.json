{
	"pages": [
		{"title": "Vegetables changelog", "text": "Vegetables changelog\nVegetables 2.0.1\n\nthe vegetables documentation template is updated to use reveal.js and the static search engine.\nfixed: special pages (e.g. search page) with common handlebars helpers (e.g. active), for example in partials, was not parsed.\nfixed: special layouts did not work since multiple folder indexes were allowed.\n\nVegetables 2.0.0\n\nremark is now replaced with reveal.js for slideshow rendering. This enhancement leads to broken compatibility in customized templates.\nimages are displayed responsively in template.\nnew tag: default to get the first not null value between two.\n\nVegetables 1.0.16\n\ntables style is enhanced in template.\n\nVegetables 1.0.15\n\nnew template tags: slideshow.logoUrl, slideshow.logoPositionX and logoPositionY.logoPositionY, to display a logo in slideshows.\n\nVegetables 1.0.14\n\nfolder index file is parsed from, in this order: README.md, README.markdown, home.md or home.markdown. This is useful when using GitLab wiki feature.\n\nVegetables 1.0.13\n\ngollum partially compatible. For now: links without .md or .markdown are treated.\n\nVegetables 1.0.12\n\nnew tag: toc, to display a table of contents\nnew tag: truncate to display a text summary\ndefault template enhanced to display summary in list pages\nnew tags: lt and gt, to test lower or greater values in templates\n\nVegetables 1.0.11\n\nfixed: html-to-text dependency was missing...\n\nVegetables 1.0.10\n\nnew currentUri for additional pages\ncommon handlebars helpers registered in a special file\nnew handlebars helpers: textize and json, which translate to text and to JSON\ndefault template enhanced to allow searches, using Tipue search\n\nVegetables 1.0.9\n\nfixed: {{baseUri}} did not work properly with the default template\nfirst implementation for additional pages, aka blog pages, such as site index, category and tags pages\nnew handlebars helper: slugize, eq and neq\ndefault template enhanced to create site index and category/tags pages\n\nVegetables 1.0.8\n\nhandlebars replace the mustache render engine\npartial files handled, thanks to handlebars, with partial-*.html files in the template directory\n\nVegetables 1.0.7\n\nconfiguration file: it is now possible to use wildcards in pageOptions documents name\nmessage added when the website is successfully deployed\n\nVegetables 1.0.6\n\nlayout support, e.g. layout-homepage.html, read from file tags or page options\ntemplate - slideshow: transitions between slides enhanced\nassets files were not updated while serving\n\nVegetables 1.0.5\n\ngeneration asynchronous process enhanced (and optimized) to be able to start the browser and live reload at the right moment\n\nVegetables 1.0.4\n\nnew options: scripts before and after to execute commands before and/or after generation\nserve mode: the Web site is automatically opened in browser\nlive reload in preview mode, can be disabled in the configuration file\n\nVegetables 1.0.3\n\nconfiguration: pageOptions available, i.e. customized tags par page\ntemplate - slideshow: one-line code enhanced and transitions between slides\nfrontmatter notation is supported, as yaml or json\nnew CLI parameters: template, globaltitle, host and port\nconfiguration file supports YAML, with this priority: the file provided in CLI parameters &lt; vegetables.yaml &lt; vegetables.json\n\nVegetables 1.0.2\n\nNon elegant logs removed\nAccess address enhanced\n\nVegetables 1.0.1\n\nsvg format added to the media files\ndefault template enhancement: page title not displayed on small screens\nbaseUri is now calculated as relative path\n\nVegetables 1.0.0\nFirst version, with:\n\nmultiple formats template\ngenerate and serve features\ndeploy on GitHub pages feature\n...\n\n", "tags": "", "url": "CHANGELOG.html"},
		{"title": "Configure Vegetables", "text": "Configure Vegetables\nWhere?\nVegetables is able to start without any configuration.\nHowever you surely want to customize parameters, such as the Web site title.\nSo, the first thing to do is adding a new file in the Markdown documents folder, named vegetables.json or vegetables.yml.\nYes, Vegetables supports both JSON and YAML.\nAn example with JSON:\n{\n    &quot;template&quot;: &quot;my-customize-template-folder&quot;,\n    &quot;tags&quot;: {\n        &quot;globalTitle&quot;: &quot;My Web site&quot;,\n        &quot;menu&quot;: [\n            {\n                &quot;uri&quot;: &quot;index.html&quot;,\n                &quot;label&quot;: &quot;Homepage&quot;\n            },\n            {\n                &quot;uri&quot;: &quot;another-page.html&quot;,\n                &quot;label&quot;: &quot;Another page&quot;\n            }\n        ]\n    }\n}\n\nThe same, with YAML:\ntemplate: my-customize-template-folder\ntags:\n globalTitle: My Web site\n menu:\n  - uri: index.html\n    label: Homepage\n  - uri: another-page.html\n    label: Another page\n\nGlobal parameters\nTemplate\nBy default, the template included with Vegetables is used, or if you have a template folder in your Markdown documents folder, it is automatically taken into account.\nOtherwise, the template parameter is made for you:\n{\n    &quot;template&quot;: &quot;path/of/the/template&quot;\n}\n\nHost and port\nThis is preview mode host and port, i.e. the ones to access the preview version of your Web site after typing vegetables serve.\nIf you want to give access to the preview version of your Web site, set the host to *.Otherwise, no one, except you, will be able to connect to it.\n{\n    &quot;host&quot;: &quot;*&quot;,\n    &quot;port&quot;: 8123\n}\n\nThe default port is 8888, so you can view your Web site at http://localhost:8888.\nAdditional media\nDuring the generation, the structure of your documentation folder is copied, to create the HTML version of the Markdown documents.\nMoreover, media files are copied: jpg (and jpeg), png, gif, svg and html.\nYou can add file formats to this list with additionalMedia:\n{\n    &quot;additionalMedia&quot;: [&quot;pdf&quot;, &quot;avi&quot;]\n}\n\nHere, all the formats listed above, plus pdf and avi files are copied.\nIt is also possible to replace the default format list with the media parameter:\n{\n    &quot;media&quot;: [&quot;htm&quot;, &quot;html&quot;, &quot;pdf&quot;]\n}\n\nHere, only html and pdf files are copied.\nBefore and after scripts\nIt is possible to start action before and after Web pages are generated.\nFor example, to start a command before:\n{\n    &quot;before&quot;: &quot;cp .htaccess .vegetables/websites&quot;\n}\n\nCommands are always started from the documents folder.\nIt is also possible to start many commands, including it in an array:\n{\n    &quot;before&quot;: [\n        &quot;cp .htaccess .vegetables/websites&quot;,\n        &quot;cp robots.txt .vegetables/websites&quot;\n    ],\n    &quot;after&quot;: &quot;echo Finished!&quot;\n}\n\nAuto open\nRight after starting Vegetables with the serve option, the homepage is automatically started in your favorite browser.\nIf you want to disable this feature, simply set serveAutoOpen to false in the configuration file.\nAuto reload\nWhen you are writing Markdown with the serve mode enabled (i.e. you started Vegetables with vegetables serve), the content in your browser is automatically refreshed when changes happen.\nYou can disable this feature, setting serveAutoReload to false in the configuration file.\nTags parameters\nTags parameters are parameters passed directly to the template, in order to display it using the Mustache syntax.\nKnowing that, if you make your own templates, this is a direct gate to transmit global data.\nFor example, a common tag is globalTitle, i.e. the generated Web site title, to display near the page title.\nTags value are not only strings: another tag, shown in the example above, is the menu tag, which is a list of objects, containing the data for each page in the menu.The default template only needs the uri and the label, but it may accept, according to your template, an icon name or a sub title to display under/near the label.\nGlobal title\nThis is the Web site title, it can be, for example, added near the page title in the &lt;title&gt; HTML tag.\nMenu\nThis is the menu, as a list of objects:\n{\n    &quot;tags&quot;: {\n        &quot;menu&quot;: [\n            {\n                &quot;uri&quot;: &quot;index.html&quot;,\n                &quot;label&quot;: &quot;Homepage&quot;\n            },\n            {\n                &quot;uri&quot;: &quot;another-page.html&quot;,\n                &quot;label&quot;: &quot;Another page&quot;\n            },\n            {\n                &quot;uri&quot;: &quot;https://github.io&quot;,\n                &quot;label&quot;: &quot;GitHub&quot;\n            }\n        ]\n    }\n}\n\nThe uri may be absolute, to link another Web site, or relative, to link an internal page.\nSlideshow options\nThese tags help to configure slideshows display.\ntags:\n slideshow:\n   logoUrl: /mylogo.png\n   logoPositionX: left\n   logoPositionY: bottom\n   autoSlide: 5000\n   loop: true\n   transition: zoom\n   headingLevel: 4\n\n\nlogoUrl: the path to the logo. It can be present locally or on another Web site. If not set, nothing is displayed.\nlogoPositionX: the horizontal position. Possible values are left, right or any values in percents or pixels (e.g. 200px or 50%). Default value: left.\nlogoPositionY: the vertical position. Possible values are top or bottom.Default value: bottom.\nheadingLevel: by default, slides with level 1 and 2 heading (i.e. with # and ##) are displayed horizontally. Level 3 are displayed vertically. When settings headingLevel: 4, level 4 slides are also displayed vertically.\ntheme: the reveal.js theme, many are available.\nautoSlide: enable automatic progress and set duration in milliseconds. 0 to disable.\nloop: loop the slideshow when true.\nshowNotes: display notes in slides, instead of showing it in the speaker view only (press s to display speaker view). Notes are prefixed with Presentation note:.\ntransition: transition type. By default: slide. Possible values: none, fade, slide, convex, concave or zoom.\n\nRemember that options can be set for each document using frontmatter.\nPage options tags\nIt is possible to define tags per page, directly in the configuration file.\nFor example:\n{\n    &quot;pageOptions&quot;: {\n        &quot;README.md&quot;: {\n            &quot;title&quot;: &quot;Homepage&quot;\n        }\n    }\n}\n\nThis means that the title of pages generated from README.md will be replaced with Homepage.\nTake a look at the documents writing documentation page for further details about the title page.\nWildcards\nIn the configuration file, the pageOptions document names can contain wildcards, i.e. * and ?.\nAn example, with YAML:\npageOptions:\n - README.md:\n  title: Welcome to my site\n - documentation/README.md\n  title: This is the documentaion homepage\n - documentation/*\n  title: A documentation page\n\nHere, the homepage title is Welcome to my site, the documentation homepage is This is the documentaion homepage and other pages in the documentation folder have the same title: A documentation page.\nWhen a document matches with many wildcards, properties are merged, with this rules:\n\nproperties of fully qualified document names have the greater priority, they are always kept\nthe last defined properties has the greater priority.\n\nFor example:\npageOptions:\n - documentation/intro-config-part1.md\n   title: First part of configuration\n - documentation/*\n   title: A documentation page\n   menu:\n    - uri: index.html\n      label: Homepage\n    - uri: documentation/index.html\n      label: Documentation\n    - uri: documentation/intro-config-part1.html\n      label: Introduction\n - documentation/intro*\n  title: Introduction\n\nHere, documentation/intro-config-part1.html has its own title, every pages in documentation starting with intro have another title and other pages in documentation have a third title.\nMoreover, every pages in documentation have a customized menu.\nLayouts\nIf the template you use provides many layouts, i.e. different page templates, you can define it using the layout parameter, in the page options tags (or directly in the Markdown document).\nFor example, with YAML:\npageOptions:\n - README.md:\n  title: Welcome to my site\n  layout: homepage\n\nCLI parameters\nSome parameters can be provided directly in the command line, when starting Vegetables, for example:\nvegetables serve --port 8123 --host *\nOr:\nvegetables generate --template=&quot;~/my-template&quot;\nOr:\nvegetables deploy --globaltitle=&quot;My GitHub pages&quot;\nTo know which parameters are available, use the CLI help command:\nvegetables --help\n", "tags": "", "url": "configuration.html"},
		{"title": "Getting started", "text": "Getting started\nInstall Vegetables\nVegetables is available on NPM.\nIf it is not already done, install NodeJS from the official Web site and type this command:\nnpm install vegetables -g\nPreview your documents\nGo to the folder containing your Markdown documents and type:\nvegetables serve\nIt it is not automatically opened in your default browser, go to http://localhost:8888 and view the result.\nNote: if no README.md or home.md are available, type the document name, followed by .html (for example document.md is available at http://localhost:8888/document.html).\nThe folder structure is also copied, so folder/document.md is available at http://localhost:8888/folder/document.html.\nCustomize\nYou can change the title and add a menu creating a Vegetables configuration file: vegetables.json, containing:\n{\n    &quot;tags&quot;: {\n        &quot;globalTitle&quot;: &quot;My Web site&quot;,\n        &quot;menu&quot;: [\n            {\n                &quot;uri&quot;: &quot;index.html&quot;,\n                &quot;label&quot;: &quot;Homepage&quot;\n            },\n            {\n                &quot;uri&quot;: &quot;another-page.html&quot;,\n                &quot;label&quot;: &quot;Another page&quot;\n            }\n        ]\n    }\n}\n\nNote that the configuration file can be vegetables.yml, written with the YAML syntax.\nIf you want, you can create your own template.\nGenerate your Web site\nOnce your documents are written, you can generate the pages to copy on your Web server, typing:\nvegetables generate\nThe result is in the document repository, in .vegetables/website/, ready to burn on a CD-R 4x if you live in the 90&#39;s.\nNote: if the folder is versioned with Git, add .vegetables to the .gitignore file.\nDeploy on GitHub pages\nIf the documentation is part of a project on GitHub, simply type:\nvegetables deploy\nThis will generate the Web pages and commit it as GitHub pages, i.e. it will be available at https://your-github-login.github.io/your-project/.\nOf course, your GitHub project will remain unchanged, only the gh-pages changes.\n", "tags": "", "url": "getting-started.html"},
		{"title": "The Vegetables documentation", "text": "Welcome to the Vegetables documentation\nWhat is Vegetables?\nVegetables is a static Web site generator, based on Markdown documents.\n\nWhat, another one?\n\nYes... you&#39;re right... with its proper lot of lakes and cool features.\nAnd I hope the lakes count will decrease quickly.\nOk, what are the cool features?\nMany formats for the same document\nWith the same Markdown, it is possible to generate many HTML documents at once.\nFor example:\n\na normal version like the page you are reading\na Markdown raw version\nand...\n\nSlideshow-able\n...and the same, as slideshows, ready to be displayed with reveal.js.\nThe result: each document is accessible as a slideshow like this one without any additional effort.\nA lot of customisable tags\nVegetables provides a lot of tags that can be displayed in the generated Web pages, thanks to the template.\nClearly, templates are highly customisable.\nDo not change your behaviour\nWhen you write Markdown, your aim is not always to make a Web site or a slideshow.\nBut once your document is written, you may need it.That&#39;s why Vegetables adds automatically slides separators for the slideshow version, or support tags per document in the configuration file.\nYou Markdown documents remain clean, and can be used directly.\nAnd it remains possible to use Frontmatter and tags written in the Markdown documents.\nPreview\nStart Vegetables once, view the result in your favorite browser, update documents in your text editor, content is automatically refreshed in the browser.\nThat&#39;s all. It&#39;s quite simple.\nAnd the others?\nTemplates\nYou can create your own templates easily, as it is HTML documents with Handlebars tags.\nAutomatic deployment on GitHub pages\nIf the documentation you have written is your GitHub project documentation, type vegetables deploy and your project will automatically provide a Web site, available at https://your-github-login.github.io/your-project/.\nIn fact, like the Vegetables documentation.\nMultiple layout\nIt is possible to give different layout to pages, for example a style for the homepage, and another for other pages.\nOf course, each layout can have its own formats.\nLayouts are configurable per page.\nThe future\nYou can take a look at the roadmap page to know what will be the next features (cool or not). For example:\n\nautomatic deployment with FTP on your own Web hosting\nnew tags, like toc, partial, sitemap, ...\n\nIf you are interested in the past things, go to the changelog.\nYou want to try?\nGet started!\n", "tags": "", "url": "index.html"},
		{"title": "Vegetables roadmap", "text": "Vegetables roadmap\nThe future cool features and enhancements\nFor now\nThis is my internal todo list, sorted by priority.If you think that some points are more important for you, let me know, I will change priorites. Or you can contribute.\n\nper-xxx-yyy.html where xxx should be a variable tag (e.g. for authors, types, ...)\nadd pagination for list-based pages (e.g. category-yyy-z.html where z is the page number)\nmore gollum compatibility, such as sequence diagrams and mathematics\nread list templates options (listTemplatesOptions) from configuration file, to set title, filename mask, pagination count, ...\nhelper: move active helper (returns true if the URI is the current page&#39;s one) as common helper\nhelper: page-only, change slideMarkdown from tag to helper\nadd plugin manager, for markdown to slideshow, ..., maybe with https://www.npmjs.com/package/polite-plugin-manager\nslideshow content should be a handlebars helper, in order to call it only when required\noptimization: templates and partials should be cleaned only when the file date changes\nsometimes, vegetables serve stops at startup with an error (not seen since a while and many updates...)\noption: rename README.md to index.html (default: true)\nset .vegetables as a constant or a configuration variable (no... rmrf on a variable seems to be dangerous...)\nprevent from concurrent generation\ntag: if git versions the folder, get the release hash, tag and branch\n\nLater\n\nremote template checkout: if template is a GitHub address, clone it to .vegetables/git-template and change the internal variable to this path\nnew command: ftp-deploy\nHTTP error pages?\n\n", "tags": "", "url": "roadmap.html"},
		{"title": "Templates", "text": "Templates\nWhat is a template?\nTemplates are HTML files including CSS and JavaScript, with Handlebars tags.\nAs Handlebars is quite simple, writing templates is really easy.\nIf you don&#39;t know Handlebars, you should read the documentation, as it is the base of Vegetables template writing.\nA template is used as a frame to include your content. And you can create your own frames!\nHow?\nGet started\nThe first thing to do is to create a new template folder, wherever you want.\nTo start, a good way to develop a new template is to put it in the documents folder, in order to take advantage of automatic regeneration feature of the preview mode when it is modified.\nClearly, create a new folder named template in your Markdown documents folder, type vegetables serve, open your Web browser, update the template, refresh in your browser, and continue.\nDefine a different path\nIt is possible to provide a template path in the CLI parameters, or in the configuration file.\nWhen the template path is not provided, the template folder in the Markdown documents folder is used.\nIf it does not exist, the default template provided with Vegetables is used.\nTemplate files\nDefault template\nThe default template must be named template.html.\nIt contains whatever your want.\nA basic example:\n&lt;html&gt;\n    &lt;head&gt;\n        &lt;title&gt;{{title}} - {{globalTitle}}&lt;/title&gt;\n    &lt;/head&gt;\n    &lt;body&gt;\n        &lt;!-- page title --&gt;\n        &lt;h1&gt;{{{globalTitle}}} - {{{title}}}&lt;/h1&gt;\n\n        &lt;!-- menu --&gt;\n        &lt;ul&gt;\n            {{#menu}}\n            &lt;li&gt;&lt;a href=&quot;{{{../baseUri}}}{{uri}}&quot;&gt;{{label}}&lt;/a&gt;&lt;/li&gt;\n            {{/menu}}\n        &lt;/ul&gt;\n\n        &lt;!-- the content transformed as HTML --&gt;\n        {{{content}}}\n\n        &lt;!-- enable the auto reload feature --&gt;\n        {{{autoReload}}}\n\n    &lt;/body&gt;\n&lt;/html&gt;\n\nThis template is simple, it provides the minimum HTML to display a Web page.\nSome explanations\nThis template contains some Handlebars tags:\n\n{{title}} - {{globalTitle}} in the &lt;title&gt; to display the page title\nnearly the same as &lt;h1&gt;\nthe &lt;ul&gt; part displays a menu, with the menu tag. The starting # of {{#menu}} means that a loop must be performed on this list\nthe Markdown content transformed as HTML is inserted thanks to {{{content}}}\n\nOf course, you can add CSS, JavaScript, pictures, ...\nThe generated file name is the Markdown document name, with the extension changed as .html.\nFor example, my-document.md is transformed as my-document.html in the generation folder.By default, README.md (and home.md) is renamed as index.html.\nOther formats\nYou can define many formats for the same Markdown documents, for example an HTML page, a slideshow, ...\nTo add a format, simply add a new template file, like the default one, and name it: template-&lt;format name&gt;.html, for example: template-slideshow.html.\nThe syntax is exactly the same as for the default template.\nGenerated files name contains the format name, for example my-document.md becomes my-document-slideshow.html.\nLayouts\nFor each Markdown document, it is possible to define a layout, i.e. a specific template, with its own style and its own formats.\nTo add a layout, create a new file, with exactly the same method as the template file, but with a specific name: layout-&lt;the layout name&gt;.html.\nFor example: layout-homepage.html.\nThen, to use this layout, declare it to the concerned Markdown documents, like explained in the configuration page.\nLike with the default template, it is possible to create many formats for layouts, for example, a slideshow specific to the homepage: layout-homepage-slideshow.html.\nAssets\nOf course, you can add JavaScript and CSS files to enhance the content rendering.\nIn this case, you should add the baseUri tag to prevent from problems when accessing from a sub folder.\n&lt;link rel=&quot;stylesheet&quot; href=&quot;{{{baseUri}}}assets/css/main.css&quot;&gt;\n\nFor example, when folder1/my-document.md is transformed as folder1/my-document.html, this line is automatically translated as:\n&lt;link rel=&quot;stylesheet&quot; href=&quot;../assets/css/main.css&quot;&gt;\n\nLocal assets, i.e. pictures, CSS and JavaScript files, must be located in the assets folder in the template folder.\nThis assets folder is fully copied in the generated Web site folder.\nTemplate development best practices\nStandard tags\nSome tags should be standard in templates, for example: globalTitle and menu which should be at least a list of {uri, label}:\n&quot;menu&quot;: [\n    {\n        &quot;uri&quot;: &quot;page.html&quot;,\n        &quot;label&quot;: &quot;Page&quot;\n    },\n    ...\n]\n\nUse base URI for static resources\nThe {{{baseUri}}} Handlebars tag should be added to access static content, like assets, or generated pages.\nTags\nTags from configuration\nRemember that tags added in the tags section of the configuration file and in the Markdown documents can be displayed in the templates.\nSo, feel free to add as many as you need.\nFor example, if you need another menu, you can create a new tag menu2 or subMenu which contains a list of objects, like the first menu.\nOther tags\nVegetables provides many other tags.\n\ncontent: the Markdown content as HTML\nmarkdown: the raw Markdown content\nslideMarkdown: the Markdown content, rewritten to be displayed as slideshow with reveal.js\nbaseUri: the relative base path to access to the root of the documentation (it is empty, or it contains ../ or ../../ according to the document path level)\ntimestamp: the generation date/time in the local format\nformat: the template format name used for the current generated HTML file, e.g. default or slideshow\nautoReload: enable the automatic reload when changes are done on the document. The Handlebars tag is replaced only in serve mode, it remains empty when it is deployed as GitHub pages for example.\ndocument: the Markdown document name with relative path, for example folder1/my-document.md\ncurrentUri: the current HTML file URI, e.g. folder1/my-document.html or folder1/my-document-slideshow.html\ntoc: list of headings, as {title, level, anchor}, in order to display a table of contents\nversions: available format versions of the current document, as a list of {format, uri}. For example:\n\n[\n    {\n        &quot;format&quot;: &quot;default&quot;,\n        &quot;uri&quot;: &quot;folder1/my-document.html&quot;\n    },\n    {\n        &quot;format&quot;: &quot;slideshow&quot;,\n        &quot;uri&quot;: &quot;folder1/my-document-slideshow.html&quot;\n    }\n]\n\nSo you can add a version marker as comment in your template, for example:\n&lt;!-- Generated by Vegetables from &#39;{{{document}}}&#39; with format &#39;{{format}}&#39; - &#39;{{timestamp}}&#39; --&gt;\n\nWill display:\nGenerated by Vegetables from &#39;folder1/my-document.md&#39; with format &#39;default&#39; - &#39;Wed Feb 25 2015 14:39:13 GMT+0100 (Romance Standard Time)&#39;\nSnippets\nFunctional tags are also provided, here are some snippets to show how to use it.\nLink to the slideshow page of the current document\n&lt;a href=&quot;{{{baseUri}}}{{uriByVersion &#39;slideshow&#39;}}&quot;&gt;\n    View as slideshow\n&lt;/a&gt;\n\nAdd active class to the current page on a link\n&lt;ul&gt;\n    {{#menu}}\n    &lt;li class=&quot;{{active uri}}&quot;&gt;\n        &lt;a href=&quot;{{{../baseUri}}}{{uri}}&quot;&gt;{{label}}&lt;/a&gt;\n    &lt;/li&gt;\n    {{/menu}}\n&lt;/ul&gt;\n\n{{active uri}} displays active if the menu URI in the loop is the same as the current page URI.\nAdd active class to the current document on a link\n&lt;ul&gt;\n    {{#menu}}\n    &lt;li class=&quot;{{activeDocument document}}&quot;&gt;\n        &lt;a href=&quot;{{{../baseUri}}}{{uri}}&quot;&gt;{{label}}&lt;/a&gt;\n    &lt;/li&gt;\n    {{/menu}}\n&lt;/ul&gt;\n\nThe difference with the previous snippet: the link is active, whatever the current format is.\nAdd a menu to link every available formats\n&lt;ul&gt;\n    {{#versions}}\n    &lt;li&gt;\n        &lt;a href=&quot;{{uriByVersion format}}&quot;&gt;{{format}}&lt;/a&gt;\n    &lt;/li&gt;\n    {{/versions}}\n&lt;/ul&gt;\n\nTable of contents\nThis snippet displays titles with level lower than 4 (i.e. 1 to 3), each level is indented thanks to the toc-x class:\n&lt;div&gt;\n    &lt;p&gt;Table of contents:&lt;/p&gt;\n    {{#toc}}\n        {{#lt depth 4}}\n        &lt;p class=&quot;toc-{{depth}}&quot;&gt;\n            &lt;a href=&quot;#{{anchor}}&quot;&gt;{{title}}&lt;/a&gt;\n        &lt;/p&gt;\n        {{/lt}}\n    {{/toc}}\n&lt;/div&gt;\n\nWith this CSS:\n.toc-2 { margin-left: 2rem; }\n.toc-3 { margin-left: 4rem; }\n\nPartials\nFor recurrent parts of your Web site, such as menu or headers, create a new file named partial-&lt;partial name&gt;.html where &lt;partial name&gt; is the name of the part.\nFor example, in the case of a footer, create the file partial-footer.html, with this content:\n&lt;p&gt;Visit our Web site&lt;/p&gt;\n&lt;p&gt;Follow us on Twitter&lt;/p&gt;\n&lt;p&gt;...&lt;/p&gt;\n\nThe partial is registered as Handlebars partial, as footer.\nTo include it in a template, use the Handlebars syntax:\n&lt;footer&gt;\n    {{&gt; footer}}\n&lt;/footer&gt;\n\nComing soon\nComing features:\n\nGet template from Git or GitHub\n\n", "tags": "", "url": "templates.html"},
		{"title": "Write documents", "text": "Write documents\nThe philosophy of Vegetables is to write documents as if it was your notes, i.e. structured logically to make it easy to read.\nClearly : you only have to write Markdown...\nThe title\nVegetables is able to guess the document title: the first header is read.\n# This is my document title\n\n## A subtitle\n\nSome content\n\nHere, the document title is This is my document title.\nIf no headers are present, the document file base name is used, for example my-document if the Markdown file name is my-document.md.\nAs the template point of view, it is the title tag.\nAdd metadata per page\nHowever, it is possible to add document metadata in order to sort documents easily or to display additional informations.\nNote that the metadata are read with this order of importance:\nConfiguration file common tags &lt; Configuration file page option tags &lt; Frontmatter tags &lt; reference tags\nClearly, when it is defined, reference tags always win.\nThe reference way\nThis method is simple: use the Markdown references to add simple data.\nFor example, to change the default title, simply write, wherever you want:\n[tag-title]: - (My Web page title)\n\nThe format is simple: between square brackets: tag- followed by the tag name, and between parenthesis: the value.\nAs this syntax is recognized by Markdown as a reference, it is not displayed when transformed to HTML.\nIt is possible to define any text metadata with this method, for example the Web site title (globalTitle), or the page layout:\n[tag-globalTitle]: - (The global Web site title)\n\nThe Frontmatter way\nIf you need to define more complex tag values, it is possible with Frontmatter. A simple example:\n---\ntitle: My Web page title\n---\n# Welcome!\n\nSome content\n\nSimply, put YAML between --- and ---. It must be the first line of the Markdown document.\nIt is also possible to define a specific menu, the page layout, or complex metadata:\n---\ntitle: My Web page title\nmenu:\n  - uri: Category Homepage\n    label: category/index.html\n  - uri: Other page\n    label: category/other-page.html\n---\n# Welcome!\n\nSome content\n\nThis is the YAML notation, but it is also possible to write Frontmatter as JSON:\n---\n{\n    &quot;title&quot;: &quot;My Web page title&quot;,\n    &quot;menu&quot;: [\n        {\n            &quot;uri&quot;: &quot;Category Homepage&quot;,\n        &quot;label&quot;: &quot;category/index.html&quot;\n        },\n        {\n            &quot;uri&quot;: &quot;Other page&quot;,\n        &quot;label&quot;: &quot;category/other-page.html&quot;\n        }\n    ]\n}\n---\n# Welcome!\n\nSome content\n\nThe configuration file way\nRemember that it is also possible to define page options directly in the configuration file under the pageOptions parameter.\nSo it is still not mandatory to add metadata in your Markdown files.\n", "tags": "", "url": "write-documents.html"}
	]
}
